#My CI/CD Pipeline

name: cmake

on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]
    tags:
      - '*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        config:
          - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
          - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }
          - {
            name: "macOS Latest Clang",
            os: macos-11,
            cc: "clang", cxx: "clang++"
          }

    steps:
      - uses: actions/checkout@v2


      - if: ${{ runner.os == 'Linux' }}
        name: Install JUCE dependencies (Linux only)
        id: juce_dependencies
        run: |
          sudo apt update 
          sudo apt install build-essential -y
          sudo apt install libasound2-dev libjack-jackd2-dev   ladspa-sdk libcurl4-openssl-dev   libfreetype6-dev  libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev mesa-common-dev
      - if: ${{ runner.os != 'macOs' }}
        name: Configure CMake

        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      - if: ${{ runner.os == 'macOs' }}
        name: Configure CMake macOS
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} "-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64"
      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - if:  ${{ runner.os == 'Windows' }}
        name: packageWindows
        run: |
          ls
          cd ${{github.workspace}}/build/ChordFilter_artefacts/Release/
          Compress-Archive VST3 ${{ runner.os}}.zip
          ls
          cd
      - if: ${{ runner.os != 'Windows' }}
        name: packageUNIX
        run: |
          cd  build/ChordFilter_artefacts/Release/
          ls
          zip -r ${{ runner.os}}.zip VST3
          ls


      
      - name: ReleaseWindows
        uses: softprops/action-gh-release@v1
        if: |
         startsWith(github.ref, 'refs/tags/') && ${{ runner.os == 'Windows' }}
        with:
          files: ${{github.workspace}}\build\ChordFilter_artefacts\Release\${{ runner.os}}.zip

      - name: ReleaseUNIX
        uses: softprops/action-gh-release@v1
        if: |
         startsWith(github.ref, 'refs/tags/') && ${{ runner.os != 'Windows' }}
          with:
            files: ${{github.workspace}}/build/ChordFilter_artefacts/Release/${{ runner.os}}.zip

 #     - if: ${{ runner.os == 'Windows' }}
  #      uses: actions/upload-artifact@v2
   #     with:
    #      name: ${{ runner.os}}VST
     #     path: ${{github.workspace}}\build\ChordFilter_artefacts\Release\VST3\

#      - if: ${{ runner.os != 'Windows' }}
 #       uses: actions/upload-artifact@v2
  #      with:
   #       name: ${{ runner.os}}VST
    #      path: build/ChordFilter_artefacts/Release/VST3/
